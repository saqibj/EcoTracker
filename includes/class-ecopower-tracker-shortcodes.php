// Path: EcoPower-Tracker/includes/class-ecopower-tracker-shortcodes.php
// File: class-ecopower-tracker-shortcodes.php

<?php

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

class EcoPower_Tracker_Shortcodes {

    public function __construct() {
        // Register shortcodes
        add_action('init', array($this, 'register_shortcodes'));
    }

    // Function to register all shortcodes
    public function register_shortcodes() {
        add_shortcode('ecopower_tracker_total_power', array($this, 'display_total_power'));
        add_shortcode('ecopower_tracker_total_co2', array($this, 'display_total_co2'));
        add_shortcode('ecopower_tracker_project_power', array($this, 'display_project_power'));
        add_shortcode('ecopower_tracker_project_co2', array($this, 'display_project_co2'));
        add_shortcode('ecopower_tracker_project_capacity', array($this, 'display_project_capacity'));
        add_shortcode('ecopower_tracker_company_power', array($this, 'display_company_power'));
        add_shortcode('ecopower_tracker_company_co2', array($this, 'display_company_co2'));
        add_shortcode('ecopower_tracker_company_capacity', array($this, 'display_company_capacity'));
        add_shortcode('ecopower_tracker_location_power', array($this, 'display_location_power'));
        add_shortcode('ecopower_tracker_location_co2', array($this, 'display_location_co2'));
        add_shortcode('ecopower_tracker_location_capacity', array($this, 'display_location_capacity'));
        add_shortcode('ecopower_tracker_type_power', array($this, 'display_type_power'));
        add_shortcode('ecopower_tracker_type_co2', array($this, 'display_type_co2'));
        add_shortcode('ecopower_tracker_type_capacity', array($this, 'display_type_capacity'));
    }

    // Function to display total power generated
    public function display_total_power($atts) {
        global $wpdb;

        // Get total power generated
        $total_power = $wpdb->get_var("SELECT SUM(generation_capacity) FROM {$wpdb->prefix}ecopower_tracker_projects");

        // Format the output
        $output = '<div class="ecopower-tracker-total-power">';
        $output .= '<h2>' . __('Total Power Generated: ', 'ecopower-tracker') . number_format($total_power) . ' KWs</h2>';
        $output .= '</div>';

        return $output;
    }

    // Function to display total CO2 offset
    public function display_total_co2($atts) {
        global $wpdb;

        // Get total power generated
        $total_power = $wpdb->get_var("SELECT SUM(generation_capacity) FROM {$wpdb->prefix}ecopower_tracker_projects");
        
        // Calculate total CO2 offset
        $total_co2_offset = $this->calculate_co2_offset($total_power);

        // Format the output
        $output = '<div class="ecopower-tracker-total-co2">';
        $output .= '<h2>' . __('Total CO2 Offset: ', 'ecopower-tracker') . number_format($total_co2_offset) . ' tons</h2>';
        $output .= '</div>';

        return $output;
    }

    // Function to display power generated by a specific project
    public function display_project_power($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'project_id' => 0
        ), $atts, 'ecopower_tracker_project_power');

        $project_id = intval($atts['project_id']);

        // Get power generated by the project
        $power = $wpdb->get_var($wpdb->prepare("SELECT generation_capacity FROM {$wpdb->prefix}ecopower_tracker_projects WHERE id = %d", $project_id));

        if ($power) {
            return '<div class="ecopower-tracker-project-power">' . __('Power Generated: ', 'ecopower-tracker') . number_format($power) . ' KWs</div>';
        } else {
            return '<div class="ecopower-tracker-project-power">' . __('Project not found or no power data available.', 'ecopower-tracker') . '</div>';
        }
    }

    // Function to display CO2 offset by a specific project
    public function display_project_co2($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'project_id' => 0
        ), $atts, 'ecopower_tracker_project_co2');

        $project_id = intval($atts['project_id']);

        // Get power generated by the project
        $power = $wpdb->get_var($wpdb->prepare("SELECT generation_capacity FROM {$wpdb->prefix}ecopower_tracker_projects WHERE id = %d", $project_id));

        if ($power) {
            $co2_offset = $this->calculate_co2_offset($power);
            return '<div class="ecopower-tracker-project-co2">' . __('CO2 Offset: ', 'ecopower-tracker') . number_format($co2_offset) . ' tons</div>';
        } else {
            return '<div class="ecopower-tracker-project-co2">' . __('Project not found or no CO2 data available.', 'ecopower-tracker') . '</div>';
        }
    }

    // Function to display the generation capacity of a specific project
    public function display_project_capacity($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'project_id' => 0
        ), $atts, 'ecopower_tracker_project_capacity');

        $project_id = intval($atts['project_id']);

        // Get generation capacity of the project
        $capacity = $wpdb->get_var($wpdb->prepare("SELECT generation_capacity FROM {$wpdb->prefix}ecopower_tracker_projects WHERE id = %d", $project_id));

        if ($capacity) {
            return '<div class="ecopower-tracker-project-capacity">' . __('Generation Capacity: ', 'ecopower-tracker') . number_format($capacity) . ' KWs</div>';
        } else {
            return '<div class="ecopower-tracker-project-capacity">' . __('Project not found or no capacity data available.', 'ecopower-tracker') . '</div>';
        }
    }

    // Function to display total power generated by projects of a specific company
    public function display_company_power($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'company' => ''
        ), $atts, 'ecopower_tracker_company_power');

        $company = sanitize_text_field($atts['company']);

        // Get total power generated by the company
        $power = $wpdb->get_var($wpdb->prepare("SELECT SUM(generation_capacity) FROM {$wpdb->prefix}ecopower_tracker_projects WHERE project_company = %s", $company));

        if ($power) {
            return '<div class="ecopower-tracker-company-power">' . sprintf(__('Total Power Generated by %s: ', 'ecopower-tracker'), $company) . number_format($power) . ' KWs</div>';
        } else {
            return '<div class="ecopower-tracker-company-power">' . __('No power data available for this company.', 'ecopower-tracker') . '</div>';
        }
    }

    // Function to display total CO2 offset by projects of a specific company
    public function display_company_co2($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'company' => ''
        ), $atts, 'ecopower_tracker_company_co2');

        $company = sanitize_text_field($atts['company']);

        // Get total power generated by the company
        $power = $wpdb->get_var($wpdb->prepare("SELECT SUM(generation_capacity) FROM {$wpdb->prefix}ecopower_tracker_projects WHERE project_company = %s", $company));

        if ($power) {
            $co2_offset = $this->calculate_co2_offset($power);
            return '<div class="ecopower-tracker-company-co2">' . sprintf(__('Total CO2 Offset by %s: ', 'ecopower-tracker'), $company) . number_format($co2_offset) . ' tons</div>';
        } else {
            return '<div class="ecopower-tracker-company-co2">' . __('No CO2 data available for this company.', 'ecopower-tracker') . '</div>';
        }
    }

    // Function to display the total generation capacity of projects by a specific company
    public function display_company_capacity($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'company' => ''
        ), $atts, 'ecopower_tracker_company_capacity');

        $company = sanitize_text_field($atts['company']);

        // Get total generation capacity by the company
        $capacity = $wpdb->get_var($wpdb->prepare("SELECT SUM(generation_capacity) FROM {$wpdb->prefix}ecopower_tracker_projects WHERE project_company = %s", $company));

        if ($capacity) {
            return '<div class="ecopower-tracker-company-capacity">' . sprintf(__('Total Generation Capacity by %s: ', 'ecopower-tracker'), $company) . number_format($capacity) . ' KWs</div>';
        } else {
            return '<div class="ecopower-tracker-company-capacity">' . __('No capacity data available for this company.', 'ecopower-tracker') . '</div>';
        }
    }

    // Function to display total power generated by projects in a specific location
    public function display_location_power($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'location' => ''
        ), $atts, 'ecopower_tracker_location_power');

        $location = sanitize_text_field($atts['location']);

        // Get total power generated in the location
        $power = $wpdb->get_var($wpdb->prepare("SELECT SUM(generation_capacity) FROM {$wpdb->prefix}ecopower_tracker_projects WHERE project_location = %s", $location));

        if ($power) {
            return '<div class="ecopower-tracker-location-power">' . sprintf(__('Total Power Generated in %s: ', 'ecopower-tracker'), $location) . number_format($power) . ' KWs</div>';
        } else {
            return '<div class="ecopower-tracker-location-power">' . __('No power data available for this location.', 'ecopower-tracker') . '</div>';
        }
    }

    // Function to display total CO2 offset by projects in a specific location
    public function display_location_co2($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'location' => ''
        ), $atts, 'ecopower_tracker_location_co2');

        $location = sanitize_text_field($atts['location']);

        // Get total power generated in the location
        $power = $wpdb->get_var($wpdb->prepare("SELECT SUM(generation_capacity) FROM {$wpdb->prefix}ecopower_tracker_projects WHERE project_location = %s", $location));

        if ($power) {
            $co2_offset = $this->calculate_co2_offset($power);
            return '<div class="ecopower-tracker-location-co2">' . sprintf(__('Total CO2 Offset in %s: ', 'ecopower-tracker'), $location) . number_format($co2_offset) . ' tons</div>';
        } else {
            return '<div class="ecopower-tracker-location-co2">' . __('No CO2 data available for this location.', 'ecopower-tracker') . '</div>';
        }
    }

    // Function to display the total generation capacity of projects in a specific location
    public function display_location_capacity($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'location' => ''
        ), $atts, 'ecopower_tracker_location_capacity');

        $location = sanitize_text_field($atts['location']);

        // Get total generation capacity in the location
        $capacity = $wpdb->get_var($wpdb->prepare("SELECT SUM(generation_capacity) FROM {$wpdb->prefix}ecopower_tracker_projects WHERE project_location = %s", $location));

        if ($capacity) {
            return '<div class="ecopower-tracker-location-capacity">' . sprintf(__('Total Generation Capacity in %s: ', 'ecopower-tracker'), $location) . number_format($capacity) . ' KWs</div>';
        } else {
            return '<div class="ecopower-tracker-location-capacity">' . __('No capacity data available for this location.', 'ecopower-tracker') . '</div>';
        }
    }

    // Function to display total power generated by projects of a specific type (Wind or Solar)
    public function display_type_power($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'type' => ''
        ), $atts, 'ecopower_tracker_type_power');

        $type = sanitize_text_field($atts['type']);

        // Get total power generated by the type
        $power = $wpdb->get_var($wpdb->prepare("SELECT SUM(generation_capacity) FROM {$wpdb->prefix}ecopower_tracker_projects WHERE type_of_plant = %s", $type));

        if ($power) {
            return '<div class="ecopower-tracker-type-power">' . sprintf(__('Total Power Generated by %s Projects: ', 'ecopower-tracker'), $type) . number_format($power) . ' KWs</div>';
        } else {
            return '<div class="ecopower-tracker-type-power">' . __('No power data available for this type.', 'ecopower-tracker') . '</div>';
        }
    }

    // Function to display total CO2 offset by projects of a specific type (Wind or Solar)
    public function display_type_co2($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'type' => ''
        ), $atts, 'ecopower_tracker_type_co2');

        $type = sanitize_text_field($atts['type']);

        // Get total power generated by the type
        $power = $wpdb->get_var($wpdb->prepare("SELECT SUM(generation_capacity) FROM {$wpdb->prefix}ecopower_tracker_projects WHERE type_of_plant = %s", $type));

        if ($power) {
            $co2_offset = $this->calculate_co2_offset($power);
            return '<div class="ecopower-tracker-type-co2">' . sprintf(__('Total CO2 Offset by %s Projects: ', 'ecopower-tracker'), $type) . number_format($co2_offset) . ' tons</div>';
        } else {
            return '<div class="ecopower-tracker-type-co2">' . __('No CO2 data available for this type.', 'ecopower-tracker') . '</div>';
        }
    }

    // Function to display the total generation capacity of projects of a specific type (Wind or Solar)
    public function display_type_capacity($atts) {
        global $wpdb;

        // Extract shortcode attributes
        $atts = shortcode_atts(array(
            'type' => ''
        ), $atts, 'ecopower_tracker_type_capacity');

        $type = sanitize_text_field($atts['type']);

        // Get total generation capacity by the type
        $capacity = $wpdb->get_var($wpdb->prepare("SELECT SUM(generation_capacity) FROM {$wpdb->prefix}ecopower_tracker_projects WHERE type_of_plant = %s", $type));

        if ($capacity) {
            return '<div class="ecopower-tracker-type-capacity">' . sprintf(__('Total Generation Capacity of %s Projects: ', 'ecopower-tracker'), $type) . number_format($capacity) . ' KWs</div>';
        } else {
            return '<div class="ecopower-tracker-type-capacity">' . __('No capacity data available for this type.', 'ecopower-tracker') . '</div>';
        }
    }

    // Utility function to calculate CO2 offset from power generated
    private function calculate_co2_offset($power) {
        // Example conversion factor: 1 KW = 0.001 tons of CO2 offset (adjust as needed)
        $conversion_factor = 0.001;
        return $power * $conversion_factor;
    }
}

// Initialize the shortcodes functionalities
new EcoPower_Tracker_Shortcodes();

?>